{"version":3,"file":"static/js/603.a5f5776d.chunk.js","mappings":"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","sources":["webpack://slim-mom-frontend/./src/pages/RegistrationPage/RegistrationPage.module.css?b753","webpack://slim-mom-frontend/./src/components/RegistrationForm/RegistrationForm.module.css?5637","components/RegistrationForm/RegistrationForm.js","pages/RegistrationPage/RegistrationPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RegistrationPage_container__o9QxY\",\"title\":\"RegistrationPage_title__pXe0V\",\"text\":\"RegistrationPage_text__fWsu9\",\"infoContainer\":\"RegistrationPage_infoContainer__4Qzr7\",\"block\":\"RegistrationPage_block__CFZqZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"RegistrationForm_loginForm__PNfPw\",\"googleBtn\":\"RegistrationForm_googleBtn__32hWw\",\"formInput\":\"RegistrationForm_formInput__m+H0J\",\"passInput\":\"RegistrationForm_passInput__m655N\",\"btnCont\":\"RegistrationForm_btnCont__GcnzE\",\"pswdVisBtn\":\"RegistrationForm_pswdVisBtn__lIwYN\",\"pswdBtnImg\":\"RegistrationForm_pswdBtnImg__ZD7sr\",\"errorMessage\":\"RegistrationForm_errorMessage__I5ZMQ\"};","import GoogleLogo from '../../assets/icons/googleLogo.svg';\nimport eyeOpened from '../../assets/icons/eye.svg';\nimport eyeClosed from '../../assets/icons/eye-blocked.svg';\nimport { Button } from 'components';\nimport s from './RegistrationForm.module.css';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { handleRegistration } from '../../redux/auth/auth-operations';\n\nconst { REACT_APP_BACKEND_URL = 'http://localhost:3000/aoi' } = process.env;\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Name length must be at least 2 characters long')\n    .required('Name is required'),\n  email: Yup.string().email('Invalid email').required('Email is required'),\n  password: Yup.string()\n    .min(6, 'Password must contain 6 or more characters!')\n    .required('Password is required'),\n});\n\nconst RegistrationForm = () => {\n  const [isPswdShown, setIsPswdShown] = useState(false);\n  const dispatch = useDispatch();\n  const [errorMessage, setErrorMessage] = useState('');\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={(values, actions) => {\n          dispatch(handleRegistration(values)).then(a => {\n            if (a?.type === 'users/signup/rejected') {\n              setErrorMessage(a?.payload);\n            }\n            console.log(errorMessage);\n          });\n          actions.resetForm();\n        }}\n      >\n        {({ handleSubmit, errors, touched }) => (\n          <Form className={s.loginForm}>\n            <Field\n              className={s.formInput}\n              type=\"name\"\n              name=\"name\"\n              title=\"Please enter your name or nickname'\"\n              placeholder=\"Name *\"\n              min-length=\"2\"\n              required\n              id=\"name\"\n            />\n            {errors.name && touched.name ? (\n              <div className={s.errorMessage}>* {errors.name}</div>\n            ) : null}\n            {(errorMessage !== '\"email\" must be a valid email' ||\n              errorMessage !== 'Email in use') &&\n            !touched.name ? (\n              <div className={s.errorMessage}>{errorMessage}</div>\n            ) : null}\n\n            <Field\n              className={s.formInput}\n              type=\"email\"\n              name=\"email\"\n              title=\"Please enter valid email address, for example  'example@gmail.com'\"\n              placeholder=\"Email *\"\n              min-length=\"6\"\n              required\n              id=\"email\"\n            />\n            {errors.email && touched.email ? (\n              <div className={s.errorMessage}>* {errors.email}</div>\n            ) : null}\n            {(errorMessage === '\"email\" must be a valid email' ||\n              errorMessage === 'Email in use') &&\n            !touched.email ? (\n              <div className={s.errorMessage}>{errorMessage}</div>\n            ) : null}\n\n            <Field\n              className={s.formInput + ' ' + s.passInput}\n              type={isPswdShown ? 'text' : 'password'}\n              name=\"password\"\n              title=\"Please enter your password. Minimum length 8 symbols\"\n              placeholder=\"Password *\"\n              min-length=\"8\"\n              required\n              id=\"password\"\n            />\n            <button\n              className={s.pswdVisBtn}\n              onClick={() => {\n                setIsPswdShown(!isPswdShown);\n              }}\n              type=\"button\"\n            >\n              <img\n                className={s.pswdBtnImg}\n                src={isPswdShown ? eyeOpened : eyeClosed}\n                alt=\"Button show/hide password\"\n              />\n            </button>\n            {errors.password && touched.password ? (\n              <div className={s.errorMessage}>* {errors.password}</div>\n            ) : null}\n            {errorMessage && errorMessage === 'Password is wrong' && !touched.password ? (\n              <div className={s.errorMessage}>{errorMessage}</div>\n            ) : null}\n\n            <div className={s.btnCont}>\n              <Button\n                isPrimaryButton={false}\n                text={'Register'}\n                width={182}\n                onClick={() => {\n                  handleSubmit();\n                }}\n              />\n              <a className={s.googleBtn} href={`${REACT_APP_BACKEND_URL}/users/google`}>\n                <img className={s.googleLogo} src={GoogleLogo} alt=\"Google logo\" />\n              </a>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default RegistrationForm;\n","import s from './RegistrationPage.module.css';\nimport RegistrationForm from 'components/RegistrationForm/RegistrationForm';\nimport { getLoadingStatus, getRegistrationStatus, getUser } from 'redux/auth/auth-selector';\nimport { useSelector } from 'react-redux';\nimport { Button, Loader } from 'components';\nimport instance from 'services/api/auth';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\n\nconst RegistrationPage = () => {\n  const isLoading = useSelector(getLoadingStatus);\n  const registrationStatus = useSelector(getRegistrationStatus);\n  const user = useSelector(getUser);\n  const [block, setBlock] = useState(false);\n  const [sec, setSec] = useState(10);\n  const [text, setText] = useState('Сlick to resend');\n\n  const tick = () => {\n    if (sec <= 0) {\n      setText('Сlick to resend');\n      setBlock(false);\n      setSec(10);\n    } else {\n      setSec(sec - 1);\n      setText(sec);\n    }\n  };\n\n  useEffect(() => {\n    if (block) {\n      const timerID = setInterval(() => tick(), 1000);\n      return () => clearInterval(timerID);\n    }\n  });\n\n  const component = (\n    <>\n      {registrationStatus ? (\n        <>\n          <div className={s.infoContainer}>\n            <h3 className={s.title}>\n              {user.name}, thank you for registration. We've sent you a verification email.\n            </h3>\n            <p className={s.text}>If you've not recieve this email</p>\n            <Button\n              isPrimaryButton={false}\n              text={`${text}`}\n              width={182}\n              isDisabled={block}\n              onClick={async () => {\n                try {\n                  const result = await instance.post('/users/verificate', { email: user.email });\n                  setBlock(true);\n                  toast.success(result.data.message);\n                } catch (error) {\n                  console.log(error);\n                  toast.error(error.response?.data?.message);\n                }\n              }}\n            />\n          </div>\n        </>\n      ) : (\n        <>\n          <h3 className={s.title}>Register</h3>\n          <RegistrationForm />\n        </>\n      )}\n    </>\n  );\n\n  return (\n    <main>\n      <div className={s.container}>\n        {isLoading ? (\n          <div className={s.block}>\n            <Loader />\n          </div>\n        ) : (\n          component\n        )}\n      </div>\n    </main>\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["REACT_APP_BACKEND_URL","process","SignupSchema","Yup","shape","name","min","required","email","password","RegistrationForm","isPswdShown","setIsPswdShown","useState","dispatch","useDispatch","errorMessage","setErrorMessage","_jsx","_Fragment","children","Formik","initialValues","validationSchema","onSubmit","values","actions","handleRegistration","then","a","type","payload","console","log","resetForm","_ref","handleSubmit","errors","touched","_jsxs","Form","className","s","loginForm","Field","formInput","title","placeholder","id","passInput","pswdVisBtn","onClick","pswdBtnImg","src","eyeOpened","eyeClosed","alt","btnCont","Button","isPrimaryButton","text","width","googleBtn","href","concat","googleLogo","GoogleLogo","RegistrationPage","isLoading","useSelector","getLoadingStatus","registrationStatus","getRegistrationStatus","user","getUser","block","setBlock","sec","setSec","setText","useEffect","timerID","setInterval","clearInterval","component","isDisabled","async","result","instance","post","toast","success","data","message","error","_error$response","_error$response$data","response","Loader"],"sourceRoot":""}